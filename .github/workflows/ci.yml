name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          IMAGE_URI="${{ secrets.IMAGE_URI}}"
          IMAGE_TAG="${{ github.run_number }}"
          docker build -t $IMAGE_URI:$IMAGE_TAG .

      - name: Scan local image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: "${{ secrets.IMAGE_URI}}:${{ github.run_number }}"
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Push Docker Image to ECR
        run: |
          IMAGE_URI="${{ secrets.IMAGE_URI}}"
          IMAGE_TAG="${{ github.run_number }}"
          docker push $IMAGE_URI:$IMAGE_TAG
          docker tag $IMAGE_URI:$IMAGE_TAG $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

  deploy:
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: SSH to Server and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            # Set image URI and tag directly
            IMAGE_URI="${{ secrets.IMAGE_URI}}"
            IMAGE_TAG="${{ github.run_number }}"
            AWS_REGION="${{ vars.AWS_REGION }}"

            echo "Using image: $IMAGE_URI:$IMAGE_TAG"

            # Login to ECR on the remote host (host already has AWS credentials)
            aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$(echo $IMAGE_URI | cut -d'/' -f1)"

            # Pull the Docker image
            docker pull "$IMAGE_URI:$IMAGE_TAG"

            # Stop/remove old container if exists
            docker rm -f resume || true

            # Run the new container
            docker run -d --name resume -p 8080:5001 "$IMAGE_URI:$IMAGE_TAG"